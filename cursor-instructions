-always test before pushing to github or to production.
-don't make assumptions and test thorough before implementing changes.
-check for curly braces before finishing file changes.
-don't forger that we're using vercel dev to run project
-always make separate file for css and javascript, don't mess HTML, JS and CSS. Each should have a separate file for reusability.
-always remove test files when tests are finished
-always add follow up questions if the instructions are not clear
-don't push without prior testing
-don't remove from DB without prior permission
-if i ask a questions, its not neccesarrily to start implementation, ask permission if i didn't provided clear instructions that changes should be done
-the perfect scenario will be for you to make a reserve file copy before changing it, and if tests passed, keep to latest one
- Create a "TODO.md" file with current tasks and context
- Use "CONTEXT.md" files in folders to explain what each directory does
- Add "SETUP.md" with environment setup steps
- Create "DEBUG.md" with common issues and solutions
- Add more comments so its clear how code works
- Create "ai-memory.md" to remember what worked/didn't work
# Performance & SEO Rules
- Always check file sizes before adding new assets (CSS > 100KB, JS > 200KB needs review)
- Optimize images: compress and add proper alt attributes for SEO
- Use descriptive titles and meta descriptions for each page
- Add proper heading hierarchy (H1, H2, H3) for content structure
- Include Open Graph tags for social media sharing
- Use semantic HTML elements for better SEO
- Implement lazy loading for images and non-critical resources
- Minify CSS and JS files for production
- Add Schema.org markup for business information
- Use proper language declaration (lang="en" not lang="zxx")
- Include canonical URLs to prevent duplicate content
- Add robots meta tags for search engine control
- Keep JavaScript files under 500KB total
- Remove unused CSS and JavaScript code
- Use CDN for external libraries when possible
- Implement proper error handling without exposing sensitive data
- Add proper form validation and user feedback
- Use HTTPS for all external resources
- Optimize database queries and API responses
