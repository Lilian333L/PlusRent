/**
 * DatePickerManager - Reusable Flatpickr date picker with unavailable dates
 * Usage: new DatePickerManager(options)
 */

class DatePickerManager {
  constructor(options = {}) {
    this.pickupInputId = options.pickupInputId || "date-picker";
    this.returnInputId = options.returnInputId || "date-picker-2";
    this.carId = options.carId || null;
    this.onDateChange = options.onDateChange || null;
    this.dateFormat = options.dateFormat || "d-m-Y";
    this.pickupFlatpickr = null;
    this.returnFlatpickr = null;
    this.isModal = options.isModal || false;
    this.customClass = options.customClass || "";
    this.timeUpdateInterval = null;
  }

  // Helper function to convert dd-mm-yyyy to YYYY-MM-DD
  convertDateFormatToISO(dateStr) {
    if (!dateStr) return "";
    const parts = dateStr.split("-");
    if (parts.length === 3) {
      return `${parts[2]}-${parts[1]}-${parts[0]}`; // Convert dd-mm-yyyy to YYYY-MM-DD
    }
    return dateStr;
  }

  // Function to find the first available date after a given date
  findFirstAvailableDate(startDate, unavailableDates) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞—è timezone –ø—Ä–æ–±–ª–µ–º
    const currentDate = new Date(startDate);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ LOCAL timezone, –∞ –Ω–µ UTC
    currentDate.setHours(0, 0, 0, 0);
    
    let attempts = 0;
    const maxAttempts = 30; // Prevent infinite loop

    while (attempts < maxAttempts) {
      // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ LOCAL timezone
      const year = currentDate.getFullYear();
      const month = String(currentDate.getMonth() + 1).padStart(2, '0');
      const day = String(currentDate.getDate()).padStart(2, '0');
      const dateStr = `${year}-${month}-${day}`;
      
      if (!unavailableDates.includes(dateStr)) {
        // Convert to dd-mm-yyyy format
        return `${day}-${month}-${year}`;
      }
      currentDate.setDate(currentDate.getDate() + 1);
      attempts++;
    }

    // Fallback: return the start date if no available date found
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const day = String(currentDate.getDate()).padStart(2, '0');
    return `${day}-${month}-${year}`;
  }

  // Load unavailable dates from API
  async loadUnavailableDates(carId) {
    try {
      const response = await fetch(
        `${window.API_BASE_URL}/api/cars/${carId}/booking-dates`
      );
      if (response.ok) {
        const data = await response.json();
        const unavailableDates = [];

        console.log('üì¶ Raw booking data:', data);

        if (data.booking_dates && Array.isArray(data.booking_dates)) {
          data.booking_dates.forEach((booking) => {
            if (booking.pickup_date && booking.return_date) {
              // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –±–µ–∑ timezone –ø—Ä–æ–±–ª–µ–º
              const pickupStr = booking.pickup_date.split('T')[0]; // "2025-01-20"
              const returnStr = booking.return_date.split('T')[0]; // "2025-01-25"
              
              const [pYear, pMonth, pDay] = pickupStr.split('-').map(Number);
              const [rYear, rMonth, rDay] = returnStr.split('-').map(Number);
              
              const startDate = new Date(pYear, pMonth - 1, pDay);
              const endDate = new Date(rYear, rMonth - 1, rDay);

              console.log(`üîç Processing booking: ${pickupStr} to ${returnStr}`);

              // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –¥–∞—Ç—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (–≤–∫–ª—é—á–∞—è pickup date!)
              const currentDate = new Date(startDate);
              while (currentDate <= endDate) {
                const year = currentDate.getFullYear();
                const month = String(currentDate.getMonth() + 1).padStart(2, '0');
                const day = String(currentDate.getDate()).padStart(2, '0');
                const dateStr = `${year}-${month}-${day}`;
                
                console.log(`  üö´ Blocking: ${dateStr}`);
                unavailableDates.push(dateStr);
                
                currentDate.setDate(currentDate.getDate() + 1);
              }
            }
          });
        }

        console.log('‚úÖ Total unavailable dates:', unavailableDates.length, unavailableDates);
        return unavailableDates;
      }
    } catch (error) {
      console.error("‚ùå Failed to load unavailable dates:", error);
    }

    return [];
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è year input –≤ dropdown
  convertYearToDropdown(instance) {
    setTimeout(() => {
      const yearInput = instance.calendarContainer.querySelector('.numInputWrapper input.cur-year');
      
      if (yearInput && !yearInput.hasAttribute('data-dropdown-applied')) {
        yearInput.setAttribute('data-dropdown-applied', 'true');
        
        // –°–æ–∑–¥–∞–µ–º select —ç–ª–µ–º–µ–Ω—Ç
        const yearSelect = document.createElement('select');
        yearSelect.className = 'flatpickr-year-dropdown';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç
        const currentYear = new Date().getFullYear();
        const minYear = currentYear;  // –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        const maxYear = currentYear + 5;  // 5 –ª–µ—Ç –≤–ø–µ—Ä–µ–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ (–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–æ –±—É–¥—É—â–µ–≥–æ)
        for (let year = minYear; year <= maxYear; year++) {
          const option = document.createElement('option');
          option.value = year;
          option.textContent = year;
          if (year === instance.currentYear) {
            option.selected = true;
          }
          yearSelect.appendChild(option);
        }
        
        // –°—Ç–∏–ª–∏ –¥–ª—è dropdown - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        yearSelect.style.cssText = `
          background: #667eea;
          color: white;
          font-weight: 700;
          border: 2px solid rgba(255, 255, 255, 0.5);
          border-radius: 8px;
          padding: 2px 6px;
          font-size: 13px;
          cursor: pointer;
          appearance: none;
          -webkit-appearance: none;
          -moz-appearance: none;
          text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
          touch-action: manipulation;
          width: auto;
          min-width: 52px;
          text-align: center;
          background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
          background-repeat: no-repeat;
          background-position: right 2px center;
          background-size: 14px;
          padding-right: 20px;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ–ø—Ü–∏–π dropdown —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        const styleId = 'flatpickr-year-dropdown-styles';
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.textContent = `
            /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è select */
            .flatpickr-year-dropdown {
              background-color: #667eea !important;
              color: white !important;
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è –æ–ø—Ü–∏–π - –¥–µ–ª–∞–µ–º —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ */
            .flatpickr-year-dropdown option {
              background-color: #2d3748 !important;
              color: white !important;
              padding: 8px !important;
              font-weight: 600 !important;
              text-shadow: none !important;
            }
            
            .flatpickr-year-dropdown option:hover,
            .flatpickr-year-dropdown option:focus,
            .flatpickr-year-dropdown option:checked,
            .flatpickr-year-dropdown option:active {
              background-color: #667eea !important;
              color: white !important;
              box-shadow: inset 0 0 10px rgba(0,0,0,0.3) !important;
            }
            
            /* Webkit browsers (Chrome, Safari) */
            .flatpickr-year-dropdown::-webkit-scrollbar {
              width: 8px;
            }
            
            .flatpickr-year-dropdown::-webkit-scrollbar-track {
              background: #2d3748;
            }
            
            .flatpickr-year-dropdown::-webkit-scrollbar-thumb {
              background: #667eea;
              border-radius: 4px;
            }
            
            /* Firefox specific */
            @-moz-document url-prefix() {
              .flatpickr-year-dropdown {
                background-color: #667eea !important;
                color: white !important;
              }
              
              .flatpickr-year-dropdown option {
                background-color: #2d3748 !important;
                color: white !important;
              }
            }
            
            /* Edge/IE fallback */
            _:-ms-fullscreen, :root .flatpickr-year-dropdown option {
              background-color: #2d3748 !important;
              color: white !important;
            }
          `;
          document.head.appendChild(style);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
        setTimeout(() => {
          const options = yearSelect.querySelectorAll('option');
          options.forEach(option => {
            option.style.backgroundColor = '#2d3748';
            option.style.color = 'white';
          });
        }, 0);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        yearSelect.addEventListener('change', function(e) {
          instance.changeYear(parseInt(e.target.value));
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π input –∏ —Å—Ç—Ä–µ–ª–∫–∏
        yearInput.style.display = 'none';
        const arrowUp = yearInput.parentNode.querySelector('.arrowUp');
        const arrowDown = yearInput.parentNode.querySelector('.arrowDown');
        if (arrowUp) arrowUp.style.display = 'none';
        if (arrowDown) arrowDown.style.display = 'none';
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º select
        yearInput.parentNode.insertBefore(yearSelect, yearInput);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ dropdown –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞
      const yearSelect = instance.calendarContainer.querySelector('.flatpickr-year-dropdown');
      if (yearSelect && yearSelect.value != instance.currentYear) {
        yearSelect.value = instance.currentYear;
      }
    }, 100);
  }

  // Initialize Flatpickr with unavailable dates
  async initializeFlatpickrWithUnavailableDates(unavailableDates = []) {
    // Prevent multiple initializations
    if (this.pickupFlatpickr || this.returnFlatpickr) {
      // Apply unavailable dates to existing instances
      if (unavailableDates.length > 0) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º unavailable dates –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        const futureUnavailableDates = unavailableDates.filter((date) => {
          const [year, month, day] = date.split('-').map(Number);
          const unavailableDate = new Date(year, month - 1, day);
          unavailableDate.setHours(0, 0, 0, 0);
          return unavailableDate >= today;
        });

        // Convert to dd-mm-yyyy format
        const convertedUnavailableDates = futureUnavailableDates.map((date) => {
          const parts = date.split("-");
          return `${parts[2]}-${parts[1]}-${parts[0]}`;
        });

        // Apply to existing instances using disable function
        const disableFunction = [
          function(date) {
            const checkDate = new Date(date);
            checkDate.setHours(0, 0, 0, 0);
            const year = checkDate.getFullYear();
            const month = String(checkDate.getMonth() + 1).padStart(2, '0');
            const day = String(checkDate.getDate()).padStart(2, '0');
            const formattedDate = `${day}-${month}-${year}`;
            return convertedUnavailableDates.includes(formattedDate);
          }
        ];

        if (this.pickupFlatpickr) {
          this.pickupFlatpickr.set("disable", disableFunction);
          this.pickupFlatpickr.redraw();
        }
        if (this.returnFlatpickr) {
          this.returnFlatpickr.set("disable", disableFunction);
          this.returnFlatpickr.redraw();
        }
      }

      // Trigger callback if dates are set
      setTimeout(() => {
        if (this.onDateChange && typeof this.onDateChange === "function") {
          this.onDateChange();
        }
      }, 100);
      return;
    }

    const pickupInput = document.getElementById(this.pickupInputId);
    const returnInput = document.getElementById(this.returnInputId);
    const pickupTimeSelect = document.getElementById("pickup-time");
    const returnTimeSelect = document.getElementById("collection-time");
    
    if (pickupInput && returnInput) {
      // Remove any existing daterangepicker instances
      if ($(pickupInput).data("daterangepicker")) {
        $(pickupInput).data("daterangepicker").remove();
      }
      if ($(returnInput).data("daterangepicker")) {
        $(returnInput).data("daterangepicker").remove();
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ LOCAL timezone
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);

      console.log('üìÖ Today:', today.toISOString(), 'Local:', today.toLocaleDateString());
      console.log('üìÖ Tomorrow:', tomorrow.toISOString(), 'Local:', tomorrow.toLocaleDateString());

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º unavailable dates –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const futureUnavailableDates = unavailableDates.filter((date) => {
        // date –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-01-20"
        const [year, month, day] = date.split('-').map(Number);
        const unavailableDate = new Date(year, month - 1, day);
        unavailableDate.setHours(0, 0, 0, 0);
        
        return unavailableDate >= today;
      });

      // Convert unavailable dates from YYYY-MM-DD to d-m-Y format
      const convertedUnavailableDates = futureUnavailableDates.map((date) => {
        const parts = date.split("-");
        return `${parts[2]}-${parts[1]}-${parts[0]}`;
      });

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Find first available dates using corrected function
      const firstAvailablePickupDate = this.findFirstAvailableDate(
        today,
        futureUnavailableDates
      );
      const firstAvailableReturnDate = this.findFirstAvailableDate(
        tomorrow,
        futureUnavailableDates
      );

      console.log('üìÖ First available pickup:', firstAvailablePickupDate);
      console.log('üìÖ First available return:', firstAvailableReturnDate);

      // Set initial values
      pickupInput.value = firstAvailablePickupDate;
      returnInput.value = firstAvailableReturnDate;
      pickupInput.setAttribute("value", firstAvailablePickupDate);
      returnInput.setAttribute("value", firstAvailableReturnDate);

const hidePastDates = function(date) {
  const checkDate = new Date(date);
  checkDate.setHours(0, 0, 0, 0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–æ–π
  const year = checkDate.getFullYear();
  const month = String(checkDate.getMonth() + 1).padStart(2, '0');
  const day = String(checkDate.getDate()).padStart(2, '0');
  const formattedDate = `${day}-${month}-${year}`;
  const isOccupied = convertedUnavailableDates.includes(formattedDate);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å –°–ï–ì–û–î–ù–Ø
  // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
  if (checkDate < today) {
    return !isOccupied; // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞—è –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∏–Ω–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º
  }
  
  return false; // –í—Å–µ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
};
      // Disable function for occupied dates with styling
      const disableOccupiedDates = function(date) {
        const checkDate = new Date(date);
        checkDate.setHours(0, 0, 0, 0);
        const year = checkDate.getFullYear();
        const month = String(checkDate.getMonth() + 1).padStart(2, '0');
        const day = String(checkDate.getDate()).padStart(2, '0');
        const formattedDate = `${day}-${month}-${year}`;
        return convertedUnavailableDates.includes(formattedDate);
      };

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å .occupied –∫ –∑–∞–Ω—è—Ç—ã–º –¥–∞—Ç–∞–º
      const addOccupiedClass = (dObj, dStr, fp, dayElem) => {
        const date = dayElem.dateObj;
        const checkDate = new Date(date);
        checkDate.setHours(0, 0, 0, 0);
        const year = checkDate.getFullYear();
        const month = String(checkDate.getMonth() + 1).padStart(2, '0');
        const day = String(checkDate.getDate()).padStart(2, '0');
        const formattedDate = `${day}-${month}-${year}`;
        
        if (convertedUnavailableDates.includes(formattedDate)) {
          dayElem.classList.add('occupied');
        }
      };

      // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
      const updateAvailableTime = () => {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É pickup
        const pickupDate = this.pickupFlatpickr.selectedDates[0];
        if (!pickupDate) return;

        const selectedDate = new Date(pickupDate);
        selectedDate.setHours(0, 0, 0, 0);
        
        const todayCheck = new Date();
        todayCheck.setHours(0, 0, 0, 0);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        const isToday = selectedDate.getTime() === todayCheck.getTime();

        if (pickupTimeSelect && isToday) {
          // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
          Array.from(pickupTimeSelect.options).forEach(option => {
            const [hours, minutes] = option.value.split(':').map(Number);
            
            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
            if (hours < currentHour || (hours === currentHour && minutes <= currentMinute)) {
              option.disabled = true;
              option.style.color = '#ccc';
            } else {
              option.disabled = false;
              option.style.color = '';
            }
          });

          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
          const selectedValue = pickupTimeSelect.value;
          const [selectedHours, selectedMinutes] = selectedValue.split(':').map(Number);
          
          if (selectedHours < currentHour || (selectedHours === currentHour && selectedMinutes <= currentMinute)) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Å
            let nextAvailableHour = currentHour + 1;
            if (nextAvailableHour > 23) nextAvailableHour = 23;
            
            const nextTimeValue = `${String(nextAvailableHour).padStart(2, '0')}:00`;
            const nextOption = Array.from(pickupTimeSelect.options).find(opt => opt.value === nextTimeValue);
            
            if (nextOption && !nextOption.disabled) {
              pickupTimeSelect.value = nextTimeValue;
            } else {
              // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
              const firstAvailable = Array.from(pickupTimeSelect.options).find(opt => !opt.disabled);
              if (firstAvailable) {
                pickupTimeSelect.value = firstAvailable.value;
              }
            }
            
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã
            pickupTimeSelect.dispatchEvent(new Event('change'));
          }
        } else if (pickupTimeSelect) {
          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –±—É–¥—É—â–∞—è –¥–∞—Ç–∞ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –≤—Ä–µ–º—è
          Array.from(pickupTimeSelect.options).forEach(option => {
            option.disabled = false;
            option.style.color = '';
          });
        }

        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è return time
        if (returnTimeSelect) {
          const returnDate = this.returnFlatpickr.selectedDates[0];
          if (!returnDate) return;

          const selectedReturnDate = new Date(returnDate);
          selectedReturnDate.setHours(0, 0, 0, 0);

          const isSameDay = selectedDate.getTime() === selectedReturnDate.getTime();
          const isReturnToday = selectedReturnDate.getTime() === todayCheck.getTime();

          if (isReturnToday && !isSameDay) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è return –µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è (–Ω–æ –Ω–µ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å —á—Ç–æ pickup)
            Array.from(returnTimeSelect.options).forEach(option => {
              const [hours, minutes] = option.value.split(':').map(Number);
              
              if (hours < currentHour || (hours === currentHour && minutes <= currentMinute)) {
                option.disabled = true;
                option.style.color = '#ccc';
              } else {
                option.disabled = false;
                option.style.color = '';
              }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            const selectedReturnValue = returnTimeSelect.value;
            const [retHours, retMinutes] = selectedReturnValue.split(':').map(Number);
            
            if (retHours < currentHour || (retHours === currentHour && retMinutes <= currentMinute)) {
              let nextAvailableHour = currentHour + 1;
              if (nextAvailableHour > 23) nextAvailableHour = 23;
              
              const nextTimeValue = `${String(nextAvailableHour).padStart(2, '0')}:00`;
              const nextOption = Array.from(returnTimeSelect.options).find(opt => opt.value === nextTimeValue);
              
              if (nextOption && !nextOption.disabled) {
                returnTimeSelect.value = nextTimeValue;
              } else {
                const firstAvailable = Array.from(returnTimeSelect.options).find(opt => !opt.disabled);
                if (firstAvailable) {
                  returnTimeSelect.value = firstAvailable.value;
                }
              }
              
              returnTimeSelect.dispatchEvent(new Event('change'));
            }
          } else if (isSameDay) {
            // –ï—Å–ª–∏ pickup –∏ return –≤ –æ–¥–∏–Ω –¥–µ–Ω—å, return –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ pickup
            const pickupValue = pickupTimeSelect.value;
            const [pickupHours, pickupMinutes] = pickupValue.split(':').map(Number);

            Array.from(returnTimeSelect.options).forEach(option => {
              const [hours, minutes] = option.value.split(':').map(Number);
              
              // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ pickup –≤—Ä–µ–º–µ–Ω–∏
              if (hours < pickupHours || (hours === pickupHours && minutes <= pickupMinutes)) {
                option.disabled = true;
                option.style.color = '#ccc';
              } else {
                option.disabled = false;
                option.style.color = '';
              }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ return –≤—Ä–µ–º—è
            const selectedReturnValue = returnTimeSelect.value;
            const [retHours, retMinutes] = selectedReturnValue.split(':').map(Number);
            
            if (retHours < pickupHours || (retHours === pickupHours && retMinutes <= pickupMinutes)) {
              const nextAvailableHour = pickupHours + 1;
              const nextTimeValue = `${String(nextAvailableHour).padStart(2, '0')}:00`;
              const nextOption = Array.from(returnTimeSelect.options).find(opt => opt.value === nextTimeValue);
              
              if (nextOption && !nextOption.disabled) {
                returnTimeSelect.value = nextTimeValue;
              } else {
                const firstAvailable = Array.from(returnTimeSelect.options).find(opt => !opt.disabled);
                if (firstAvailable) {
                  returnTimeSelect.value = firstAvailable.value;
                }
              }
              
              returnTimeSelect.dispatchEvent(new Event('change'));
            }
          } else {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –≤—Ä–µ–º—è –µ—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
            Array.from(returnTimeSelect.options).forEach(option => {
              option.disabled = false;
              option.style.color = '';
            });
          }
        }
      };

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö date picker —Å year dropdown
      const currentYear = new Date().getFullYear();
      const maxDate = new Date(currentYear + 5, 11, 31); // 31 –¥–µ–∫–∞–±—Ä—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç

// Initialize pickup date picker
this.pickupFlatpickr = flatpickr(pickupInput, {
  dateFormat: this.dateFormat,
  altFormat: this.dateFormat,
  altInput: false,
  minDate: "today",
  maxDate: maxDate, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
  defaultDate: firstAvailablePickupDate,
  disable: [disableOccupiedDates, hidePastDates],
  allowInput: false,
  static: this.isModal ? true : false,
  appendTo: document.body,
  position: this.isModal ? "above" : "below",
  closeOnSelect: true,
  disableMobile: true,
  locale: {
    months: {
      shorthand: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
      ],
      longhand: [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
      ],
    },
    weekdays: {
      shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      longhand: [
        "Sunday", "Monday", "Tuesday", "Wednesday",
        "Thursday", "Friday", "Saturday"
      ],
    },
  },
  onDayCreate: addOccupiedClass,
  onOpen: (selectedDates, dateStr, instance) => {
    this.convertYearToDropdown(instance);
  },
  onMonthChange: (selectedDates, dateStr, instance) => {
    this.convertYearToDropdown(instance);
  },
  onChange: (selectedDates, dateStr, instance) => {
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hasSelected –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã
    if (selectedDates.length > 0) {
      instance.calendarContainer.classList.add('hasSelected');
    } else {
      instance.calendarContainer.classList.remove('hasSelected');
    }
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    if (selectedDates.length > 0) {
      const selectedDate = selectedDates[0];
      const todayCheck = new Date();
      todayCheck.setHours(0, 0, 0, 0);
      
      // Prevent selecting past dates
      const selectedDateOnly = new Date(
        selectedDate.getFullYear(),
        selectedDate.getMonth(),
        selectedDate.getDate()
      );
      
      if (selectedDateOnly < todayCheck) {
        instance.setDate(firstAvailablePickupDate);
        alert("Please select today or a future date");
        return;
      }
      
      // Update return date to same day initially
      const sameDay = new Date(selectedDate);
      const year = sameDay.getFullYear();
      const month = String(sameDay.getMonth() + 1).padStart(2, "0");
      const day = String(sameDay.getDate()).padStart(2, "0");
      const formattedDate = `${day}-${month}-${year}`;
      
      // Update return date picker
      this.returnFlatpickr.set("minDate", sameDay);
      this.returnFlatpickr.setDate(formattedDate);
      
      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
      setTimeout(() => updateAvailableTime(), 50);
    }
  },
  onReady: (selectedDates, dateStr, instance) => {
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hasSelected –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
    if (selectedDates.length > 0) {
      instance.calendarContainer.classList.add('hasSelected');
    }
    
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => updateAvailableTime(), 100);
  },
});

      // Initialize return date picker
      this.returnFlatpickr = flatpickr(returnInput, {
        dateFormat: this.dateFormat,
        altFormat: this.dateFormat,
        altInput: false,
        minDate: "today",
        maxDate: maxDate, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        defaultDate: firstAvailableReturnDate,
        disable: [disableOccupiedDates, hidePastDates],
        allowInput: false,
        static: this.isModal ? true : false,
        appendTo: document.body,
        position: this.isModal ? "above" : "below",
        disableMobile: true,
        closeOnSelect: true,
        locale: {
          months: {
            shorthand: [
              "Jan", "Feb", "Mar", "Apr", "May", "Jun",
              "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ],
            longhand: [
              "January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December"
            ],
          },
          weekdays: {
            shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            longhand: [
              "Sunday", "Monday", "Tuesday", "Wednesday",
              "Thursday", "Friday", "Saturday"
            ],
          },
        },
onDayCreate: addOccupiedClass,
onOpen: (selectedDates, dateStr, instance) => {
  this.convertYearToDropdown(instance);
},
onMonthChange: (selectedDates, dateStr, instance) => {
  this.convertYearToDropdown(instance);
},
onChange: (selectedDates, dateStr, instance) => {
  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hasSelected –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã
  if (selectedDates.length > 0) {
    instance.calendarContainer.classList.add('hasSelected');
  } else {
    instance.calendarContainer.classList.remove('hasSelected');
  }
  
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
  if (this.onDateChange) {
    this.onDateChange();
  }
  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ return –¥–∞—Ç—ã
  setTimeout(() => updateAvailableTime(), 50);
},
onReady: (selectedDates, dateStr, instance) => {
  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hasSelected –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
  if (selectedDates.length > 0) {
    instance.calendarContainer.classList.add('hasSelected');
  }
  
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
  if (this.customClass) {
    instance.calendarContainer.classList.add(this.customClass);
  }
  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  setTimeout(() => updateAvailableTime(), 100);
},
});

// Add event listeners to time select elements
if (pickupTimeSelect) {
  pickupTimeSelect.addEventListener("change", () => {
    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ pickup time
    updateAvailableTime();
    
    if (
      window.priceCalculator &&
      typeof window.priceCalculator.recalculatePrice === "function"
    ) {
      window.priceCalculator.recalculatePrice();
    }
  });
}

if (returnTimeSelect) {
  returnTimeSelect.addEventListener("change", () => {
    if (
      window.priceCalculator &&
      typeof window.priceCalculator.recalculatePrice === "function"
    ) {
      window.priceCalculator.recalculatePrice();
    }
  });
}

      // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
      let lastUpdateHour = new Date().getHours();

      // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const checkAndUpdateTime = () => {
        const currentHour = new Date().getHours();
        if (currentHour !== lastUpdateHour) {
          console.log(`‚è∞ Hour changed: ${lastUpdateHour} ‚Üí ${currentHour}`);
          updateAvailableTime();
          lastUpdateHour = currentHour;
        }
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
          checkAndUpdateTime();
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –≤—Ä–µ–º—è
      if (pickupTimeSelect) {
        pickupTimeSelect.addEventListener('focus', checkAndUpdateTime);
        pickupTimeSelect.addEventListener('click', checkAndUpdateTime);
      }

      if (returnTimeSelect) {
        returnTimeSelect.addEventListener('focus', checkAndUpdateTime);
        returnTimeSelect.addEventListener('click', checkAndUpdateTime);
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
      const safetyCheckInterval = setInterval(() => {
        const pickupDate = this.pickupFlatpickr?.selectedDates[0];
        if (!pickupDate) return;
        
        const selectedDate = new Date(pickupDate);
        selectedDate.setHours(0, 0, 0, 0);
        
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        if (selectedDate.getTime() === today.getTime()) {
          checkAndUpdateTime();
        }
      }, 600000); // 10 –º–∏–Ω—É—Ç

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      this.timeUpdateInterval = safetyCheckInterval;

      // Store references globally
      window.pickupFlatpickr = this.pickupFlatpickr;
      window.returnFlatpickr = this.returnFlatpickr;

      // Set up outside hours notice functionality
      this.setupOutsideHoursNotice();

      // Trigger price calculator after initialization
      setTimeout(() => {
        if (this.onDateChange && typeof this.onDateChange === "function") {
          this.onDateChange();
        }
      }, 200);
    } else {
      console.error("Date inputs not found!");
    }
  }

  fixMobileDatePickerStyling() {
    const mobileCSS = `
      .flatpickr-rContainer {
        overflow: hidden !important;
      }
      .flatpickr-wrapper {
        width: 100% !important;
      }
      @media (max-width: 768px) {
        .flatpickr-input {
          font-size: 12px !important;
          padding: 6px !important;
          width: 100% !important;
          line-height: 18px !important;
        }
        .flatpickr-calendar {
          width: 260px !important;
          max-width: calc(100vw - 16px) !important;
        }
      }
    `;

    if (!document.getElementById("mobile-date-picker-styles")) {
      const style = document.createElement("style");
      style.id = "mobile-date-picker-styles";
      style.textContent = mobileCSS;
      document.head.appendChild(style);
    }
  }

  async initialize() {
    try {
      if (this.carId) {
        const unavailableDates = await this.loadUnavailableDates(this.carId);
        await this.initializeFlatpickrWithUnavailableDates(unavailableDates);
      } else {
        await this.initializeFlatpickrWithUnavailableDates([]);
      }
    } catch (error) {
      console.error("‚ùå DatePickerManager initialization failed:", error);
      try {
        await this.initializeFlatpickrWithUnavailableDates([]);
      } catch (fallbackError) {
        console.error("‚ùå Fallback initialization also failed:", fallbackError);
      }
    }

    this.fixMobileDatePickerStyling();
  }

  getDateValues() {
    const pickupInput = document.getElementById(this.pickupInputId);
    const returnInput = document.getElementById(this.returnInputId);

    return {
      pickupDate: pickupInput ? pickupInput.value : "",
      returnDate: returnInput ? returnInput.value : "",
      pickupDateISO: pickupInput
        ? this.convertDateFormatToISO(pickupInput.value)
        : "",
      returnDateISO: returnInput
        ? this.convertDateFormatToISO(returnInput.value)
        : "",
    };
  }

  setupOutsideHoursNotice() {
    if (!window.priceCalculator || !window.currentCarData) {
      return;
    }
    
    const pickupTimeSelect = document.getElementById("pickup-time");
    const returnTimeSelect = document.getElementById("collection-time");

    if (!pickupTimeSelect || !returnTimeSelect) {
      return;
    }

    const updateOutsideHoursNotice = () => {
      if (
        window.priceCalculator &&
        window.priceCalculator.updateOutsideHoursNotice
      ) {
        const pickupTime = pickupTimeSelect.value || "09:00";
        const returnTime = returnTimeSelect.value || "09:00";
        window.priceCalculator.updateOutsideHoursNotice(pickupTime, returnTime);
      }
    };

    pickupTimeSelect.addEventListener("change", updateOutsideHoursNotice);
    returnTimeSelect.addEventListener("change", updateOutsideHoursNotice);

    setTimeout(() => updateOutsideHoursNotice(), 50);

    this.loadFeeSettings();
  }

  async loadFeeSettings() {
    try {
      const response = await fetch(
        `${window.API_BASE_URL}/api/fee-settings/public`
      );
      if (response.ok) {
        const fees = await response.json();

        const outsideHoursFeeElement =
          document.getElementById("outside-hours-fee");
        if (outsideHoursFeeElement && fees.outside_hours_fee !== undefined) {
          outsideHoursFeeElement.textContent = `‚Ç¨${fees.outside_hours_fee}`;
        }
      }
    } catch (error) {
      console.warn("Failed to load fee settings:", error);
    }
  }

  destroy() {
    // ‚úÖ –û—á–∏—â–∞–µ–º interval –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
    if (this.timeUpdateInterval) {
      clearInterval(this.timeUpdateInterval);
      this.timeUpdateInterval = null;
    }
    
    if (this.pickupFlatpickr) {
      this.pickupFlatpickr.destroy();
      this.pickupFlatpickr = null;
    }
    if (this.returnFlatpickr) {
      this.returnFlatpickr.destroy();
      this.returnFlatpickr = null;
    }
  }
}

// Make DatePickerManager available globally
window.DatePickerManager = DatePickerManager;
